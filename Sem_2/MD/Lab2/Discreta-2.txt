#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#define N 25

typedef struct
{
	int poz;
	int pond;
}matr_ad;

typedef struct NOD
{
	int inf;
	struct NOD *link;
}NOD;

NOD *pb;

void afisare_matr_1(matr_ad a[][N], int n)
{
	int i, j;
	printf("\n\n\t\t\t\t\t\tMatrice de Adiacenta\n");
	printf("  A ");
	for(j=1;j<n;j++)
		printf("  X%d",j);
    printf("\n\n");
	for (i = 1; i<n; i++) {
		printf(" X%d",i);
		for (j = 1; j<n; j++)
			printf("%4d", a[i][j].poz);
		printf("\n\n");
	}
	printf("\n\n Informatii:\n\n");
	printf(" 1 - Marcheaza unirea virfurilor printr-un arc!\n");
	printf(" 0 - Virfurile nu sunt unite!\n");
	printf(" -Atentie nu se permite introducerea buclelor din cauza algoritmilor folositi\n");
}
void afisare_matr_c(matr_ad a[][N], int n)
{
	int i, j;
	printf("  C ");
	for(j=1;j<n;j++)
		printf("  X%d",j);
    printf("\n\n");
	for (i = 1; i<n; i++) {
		printf(" X%d",i);
		for (j = 1; j<n; j++){
			if(a[i][j].poz<-1) {printf("  -~"); continue;}
			if(a[i][j].poz>2000)  {printf("   ~"); continue;}
			printf("%4d", a[i][j].poz);}
		printf("\n\n");
	}
}
void afisare_matr_2(matr_ad a[][N], int n, int m)
{
	int i, j;
	printf("\n\n\t\t\t\t\t\tMatrice de Incidenta\n");
	printf("  B ");
	for(j=1;j<m;j++)
		printf("  X%d",a[0][j].poz);
    printf("\n\n");
	for (i = 1; i<n; i++) {
		printf(" U%d",a[i][0].poz);
		for (j = 1; j<m; j++)
			printf("%4d", a[i][j].poz);
		printf("\n\n");
	}
	printf("\n\n Informatii:\n\n");
	printf(" -1 - Indica virful din care porneste arcul!\n");
	printf("  1 - Indica virful in care intra arcul!\n");
	printf("  2 - Indica o bucla!\n");
	printf("  0 - Virfurile nu sunt unite!\n");
	printf(" -Atentie nu se permite introducerea buclelor din cauza algoritmilor folositi\n");
}
void afisare_matr_3(matr_ad a[][N], int n, int m)
{
	int i, j;
	printf("\n\n\t\t\t\t\t\t   Lista de Adiacenta\n");
	for (i = 1; i<=n; i++) {
		printf(" X%d: ",a[i][0].poz);
		for (j = 1; j<=m; j++)
			if(a[i][j].poz!=0)
			printf("%d,", a[i][j].poz);
		printf("0");
		printf("\n\n");
		}
	printf("\n\n Informatii:\n\n");
	printf(" -Cifrele introduse indica virfurile cu care interactioneaza virful curent!\n");
	printf(" -Pentru a finisa introducerea listei tastati [0]!\n");
	printf(" -Atentie nu se permite introducerea buclelor din cauza algoritmilor folositi\n");
}
void matr_adc(matr_ad a[][N])
{
	int i, j, n, z, nr = 0, m, e,u=0,k,v[N][N];
	matr_ad b[N][N];
	printf("\n\n\t\t\t\t\t     Introduceti numarul de virfuri:");
	scanf("%d", &n); 
	system("cls");
	n++;
	for (i = 1; i < n; i++)
		for (j = 1; j < n; j++)
			v[i][j] = 0;
	for (i = 0; i < n; i++)
		for (j = 0; j < n; j++)
			a[i][j].poz = 0;
	for (j = 1; j < n; j++)
		a[0][j].poz = j;
	for (i = 1; i < n; i++)
		a[i][0].poz = i;
	afisare_matr_1(a, n);
	for (i = 1; i < n; i++)
		for (j = 1; j < n; j++)
		{
		et1:printf("\n A(%d,%d):", i, j);
			scanf("%d", &a[i][j].poz);
			if ((a[i][j].poz != 0 && a[i][j].poz != 1 )|| a[i][i].poz==1 )  { printf("Eroare!"); goto et1;}
			else
			{
				if(a[i][j].poz==1)
					{
						et9:printf("\n Dati ponderea arcului introdus: ");
				        scanf("%d",&a[i][j].pond);
				        if(a[i][j].pond<0) 
				        	{ 
				        		printf("Eroare!"); 
				        		goto et9;
				        	}
				    }
			}
			system("cls");
			if (a[i][j].poz == 1) { nr++; v[i][j] = j; }
			afisare_matr_1(a, n);
		}
		a[0][0].poz=n;
	et:printf("\n\t\t\t\t\t     Selectati varianta dorita:\n");
	printf("\n 1.Convertirea matricei adiacente in matrice incidenta!\n");
	printf(" 2.Convertirea matricei adiacente in lista de adiacenta!\n");
	printf(" 3.Continuare!!!\n\n");
	et5:printf(" >>");
	scanf("%d", &z);
	switch (z)
	{
	case 1: 
	{ 
		system("cls");
		nr++;
		for (i = 0; i < nr; i++)
			for (j = 0; j < n; j++)
				b[i][j].poz = 0;
		for (j = 1; j<n; j++)
			b[0][j].poz = j;
		for (i = 1; i<nr; i++)
			b[i][0].poz = i;
		for (i=1; i<n; i++)
			for(j=1;j<n;j++)
				if(a[i][j].poz==1) 
				{   u++;
                   if(i==j) b[u][i].poz=2;
                   else 
                   {
                      b[u][i].poz=-1;
                      b[u][j].poz=1;
                   }
				}
		afisare_matr_1(a, n);
		afisare_matr_2(b, nr, n);
		system("pause");
		system("cls");
		break;
	}
	case 2: 
	{  
		e = n - 1; 
		m = e + 1;
		system("cls");
		for (i = 1; i <= e; i++)
			for (j = 1; j <= m; j++)
				b[i][j].poz = 0;
		for (i = 1; i <= e; i++)
			b[i][0].poz = i;
		for (i = 1; i <= e; i++)
			for (j = 2; j <= m; j++)
			{
				b[i][j].poz = v[i][j-1];
			}
		afisare_matr_1(a, n);
		afisare_matr_3(b, e, m);
		system("pause");
		system("cls");
		break; 
	}
	case 3: return;
	default: printf(" Eroare!!! Alegeti optiunea din nou"); goto et5;
		break;
	}
printf("\n \t\t\t\t\tCe doriti sa faceti mai departe?\n");
printf(" 1.Transormati matricea existenta!\n");
printf(" 2.Iesire!\n");
et3: printf(" >>");
	scanf("%d", &k);
	switch(k)
	{
	case 1: goto et; break;
	case 2: return; break;
	default: printf(" Eroare!!! Alegeti optiunea din nou"); goto et3;
		break; 
	}
}
void matr_inc(matr_ad a[][N])
{
	int i, j, n, z,  m, e,t,k,i1,j1,u,p,q,jmin,jmax;
	matr_ad b[N][N],c[N][N];
	printf("\n\n\t\t\t\t\t     Introduceti numarul de virfuri:");
	scanf("%d", &m);
	printf("\n\n\t\t\t\t\t      Introduceti numarul de arce:");
	scanf("%d", &n);
	system("cls");
	n++; m++;
	for (i = 1; i < m; i++){
		for (j = 1; j < m; j++)
			a[i][j].pond=0;}
	for (i = 0; i < n; i++)
		for (j = 0; j < m; j++)
			c[i][j].poz = 0;
	for (j = 1; j<m; j++)
		c[0][j].poz = j;
	for (i = 1; i<n; i++)
		c[i][0].poz = i;
	afisare_matr_2(c,n,m);
	for (i = 1; i<n; i++)
	{
		et10:
		jmin=0; jmax=0;
		p=0; q=0;
		for (j = 1; j<m; j++) 
		{
		et2:printf("\n B(%d,%d):", i, j);
			scanf("%d", &c[i][j].poz);
			if (c[i][j].poz != -1 && c[i][j].poz != 1 && c[i][j].poz != 0) {printf("Eroare!"); goto et2;}
            if (c[i][j].poz== -1)
            {
            	jmin=j;
            	if(p==0) p=3;
            	else {printf("Eroare!\n");  goto et2;} 
            }
             if (c[i][j].poz== 1)
            {
            	jmax=j;
            	if(q==0) q=3;
            	else {printf("Eroare!\n");  goto et2;} 
            }            
			system("cls");
			afisare_matr_2(c,n,m);
		}
		if(jmin==0 || jmax==0) 
		{
			printf(" Eroare! Arcul nu a fost introdus corect");
			goto et10;
		}
		et9:printf("\n Dati ponderea arcului introdus: ");
			scanf("%d",&a[jmin][jmax].pond);
			if(a[jmin][jmax].pond<0) 
			{ 
				printf("Eroare!"); 
				goto et9;
			}

	}
		for (i = 0; i < m; i++)
			for (j = 0; j < m; j++)
				a[i][j].poz = 0;
		for (j = 1; j < m; j++)
			a[0][j].poz = j;
		for (i = 1; i < m; i++)
			a[i][0].poz = i;
		for (i = 1; i < n; i++)
		{
			for (j = 1; j < m; j++)
			{
				if(c[i][j].poz==1) j1=j;
                if(c[i][j].poz==-1) i1=j;
                if(c[i][j].poz==2) i1=j1=j;
            }
            a[i1][j1].poz=1;
        }
        a[0][0].poz=m;
	et:printf("\n\t\t\t\t\t     Selectati varianta dorita:\n");
	printf("\n 1.Convertirea matricei incidente in matrice adiacenta!\n");
	printf(" 2.Convertirea matricei incidente in lista de adiacenta!\n");
	printf(" 3.Continuare!!!\n\n");
et5:printf(" >>");
	scanf("%d", &z);
	switch (z)
	{
	case 1:
	{
		system("cls");
		for (i = 0; i < m; i++)
			for (j = 0; j < m; j++)
				b[i][j].poz = 0;
		for (j = 1; j < m; j++)
			b[0][j].poz = j;
		for (i = 1; i < m; i++)
			b[i][0].poz = i;
		for (i = 1; i < n; i++){
			for (j = 1; j < m; j++)
			{
				if(c[i][j].poz==1) j1=j;
                if(c[i][j].poz==-1) i1=j;
                if(c[i][j].poz==2) i1=j1=j;
            }
            b[i1][j1].poz=1;
        }
		afisare_matr_2(c, n, m);
		afisare_matr_1(b, m);
		system("pause");
		system("cls");
		break;
	}
	case 2:
	{
		e = m - 1;
		t = e + 1;
		system("cls");
		for (i = 1; i <= e; i++)
			for (j = 1; j <= t; j++)
				b[i][j].poz = 0;
		for (i = 1; i <= e; i++)
			b[i][0].poz = i;
		for (i = 1; i<n; i++)
		    {
		    	u=0;
		     for (j = 1; j<m; j++)
			{               
                    if(c[i][j].poz==1)  u=j;
                    if(c[i][j].poz==-1) i1=j;
                    if(c[i][j].poz==2) {i1=j; u=j;}
            }
                 b[i1][u].poz=u;
			}
		afisare_matr_2(c, n, m);
		afisare_matr_3(b, e, t);
		system("pause");
		system("cls");
		break;
	}
	case 3: return;
	default: printf(" Eroare!!! Alegeti optiunea din nou"); goto et5;
		break;
	}
printf("\n \t\t\t\t\tCe doriti sa faceti mai departe?\n");
printf(" 1.Transormati matricea existenta!\n");
printf(" 2.Iesire!\n");
et3: printf(" >>");
	scanf("%d", &k);
	switch(k)
	{
	case 1: goto et; break;
	case 2: return; break;
	default: printf(" Eroare!!! Alegeti optiunea din nou"); goto et3;
		break; 
	}
}
void lista_adc(matr_ad a[][N])
{
	int i,j,n,m,z,nr=0,k,u,p=0,j1,l;
	matr_ad b[N][N],c[N][N];
	printf("\n\n\t\t\t\t\t    Introduceti numarul de virfuri:");
	scanf("%d", &n);
	m = n + 1;
	for (i = 1; i < m; i++){
		for (j = 1; j < m; j++)
			a[i][j].pond=0;}
	system("cls");
	for (i = 1; i <=n; i++)
		for (j = 1; j <=m; j++)
			c[i][j].poz = 0;
	for (i = 1; i<=n; i++)
		c[i][0].poz = i;
	afisare_matr_3(c, n, m);
	for (i = 1; i<=n; i++)
		for (j = 2; j<=m; j++) {
		et4:printf("\n Virf(%d):", i);
			scanf("%d", &c[i][j].poz);
			if (c[i][j].poz <0 || c[i][j].poz>n) {printf("Eroare"); goto et4;}
			if (c[i][j].poz==i) {printf("Eroare"); goto et4;}
			for(j1=2;j1<j;j1++) if(c[i][j1].poz==c[i][j].poz) { printf("Eroare"); goto et4;}
			if (c[i][j].poz != 0) nr++; 
			else break;
			et9:printf("\n Dati ponderea arcului introdus: ");
				        scanf("%d",&a[i][c[i][j].poz].pond);
				        if(a[i][c[i][j].poz].pond<0) 
				        	{ 
				        		printf("Eroare!"); 
				        		goto et9;
				        	}
			system("cls");
			afisare_matr_3(c, n, m);
		}
	for (i = 1; i < m; i++)
		for (j = 1; j < m; j++)
			a[i][j].poz = 0;
	for (i = 1; i<=n; i++)
		{   u=0;
	    for (j = 2; j<=m; j++)
			if (c[i][j].poz!=0) {u=c[i][j].poz; a[i][u].poz=1;}		
        }
    a[0][0].poz=m;
	et:printf("\n\t\t\t\t\t     Selectati varianta dorita:\n");
	printf(" \n 1.Afisarea listei de adiacenta!\n");
	printf(" 2.Convertirea listei de adiacenta in matrice adiacenta!\n");
	printf(" 3.Convertirea listei de incidenta in matrice incidenta!\n");
	printf(" 4.Continuare!!!\n\n");
et5:printf(" >>");
	scanf("%d", &z);
	switch (z)
	{
	case 2:
	{
		system("cls");
		for (i = 0; i < m; i++)
			for (j = 0; j < m; j++)
				b[i][j].poz = 0;
		for (j = 1; j < m; j++)
			b[0][j].poz = j;
		for (i = 1; i < m; i++)
			b[i][0].poz = i;
		for (i = 1; i<=n; i++)
			{   u=0;
		    for (j = 2; j<=m; j++)
				if (c[i][j].poz!=0) {u=c[i][j].poz; b[i][u].poz=1;}		
	        }
		afisare_matr_3(c, n, m);
		afisare_matr_1(b, m);
		system("pause");
		system("cls");
		break;
	}
	case 3:
	{
		system("cls");
		nr++;
		for (i = 0; i < nr; i++)
			for (j = 0; j < m; j++)
				b[i][j].poz = 0;
		for (j = 1; j<m; j++)
			b[0][j].poz = j;
		for (i = 1; i<nr; i++)
			b[i][0].poz = i;
		for (i = 1; i<=n; i++)
			{   
		    for (j = 2; j<=m; j++)
				if (c[i][j].poz!=0) 
				{
                    u=c[i][j].poz;
                    p++;
                    if(c[i][j].poz==i) b[p][i].poz=2;
                    else 
                    {
                    	b[p][i].poz=-1;
                    	b[p][u].poz=1;
                    }
				}		
	        }
		afisare_matr_3(c, n, m);
		afisare_matr_2(b, nr, m);
		system("pause");
		system("cls");
		break;
	}
	case 1:
	{
        system("cls");
        for (i = 1; i<=n; i++){
        	l=0;
		    for (j = 1; j<m; j++){
		    	for(j1=j;j1<=m;j1++)
		    	if(c[i][j].poz>c[i][j1].poz){
		    		l=c[i][j].poz;
			    	c[i][j].poz=c[i][j1].poz;
			    	c[i][j1].poz=l;}
			    }}  
        afisare_matr_3(c,n,m);
        system("pause");
		system("cls");
		break;
	}
	case 4: return;
	default: printf(" Eroare!!! Alegeti optiunea din nou"); goto et5;
		break;
	}
printf("\n \t\t\t\t\tCe doriti sa faceti mai departe? \n");
printf(" 1.Transormati matricea existenta!\n");
printf(" 2.Iesire!\n");
et3: printf(" >>");
	scanf("%d", &k);
	switch(k)
	{
	case 1: goto et; break;
	case 2: return; break;
	default: printf(" Eroare!!! Alegeti optiunea din nou"); goto et3;
		break; 
	}
}
void meniu(matr_ad tab[N][N])
{
	int o;
	system("cls");
	printf("\n\n\t\t\t\t\tPrin ce metoda doriti sa introduceti graful?");
	printf("\n\n 1. Matrice de Adiacenta\n");
	printf(" 2. Matrice de Incidenta\n");
	printf(" 3. Lista de Adiacenta\n");
	et3: printf(" >>");
	scanf("%d", &o);
	switch(o)
	{
	case 1: matr_adc(tab); break;
	case 2: matr_inc(tab); break;
	case 3: lista_adc(tab); break;
	default: printf(" Eroare!!! Alegeti optiunea din nou"); goto et3;
		break; 
	}
}
void afis_m(int p[N], int n, int f)
{
	int i;
	printf(" M%d",f);
	for(i=1;i<n;i++)
	{
		if(p[i]<-1) {printf("  -~"); continue;}
		if(p[i]>2000) {printf("   ~");  continue;}
		printf("%4d",p[i]);
	}
	printf("\n");
}
NOD *add(struct NOD *pb, struct NOD *pf, int inf)
{
	NOD *temp;
	if(pb==NULL)
	{
		pb=(NOD*)malloc(sizeof(NOD));
		pb->inf=inf;
		pb->link=NULL;
		pf=pb;
		return pf;
	}
	else
	{
		temp=pf;
		pf=(NOD*)malloc(sizeof(NOD));
		pf->inf=inf;
		pf->link=NULL;
		temp->link=pf;
		return pf;
	}
}
void add_f(int val)
{
    NOD *temp;
    temp=(NOD*)malloc(sizeof(NOD));
    temp->inf=val;
	if(pb==NULL)
	{
        temp->link=NULL;
        pb=temp;
	}
	else
	{
		temp->link=pb;
		pb=temp;
	}
}
int repetare(int j, NOD *pb){
	NOD *temp;
	int ver;
	temp=pb;
	ver=0;
	while(temp!=NULL){
		if(temp->inf==j) ver=1;
		temp=temp->link;
	}
	return ver;
}
int ciclu(matr_ad a[N][N] , int i, NOD *pf){
	NOD *temp;
	int j;
	temp=pf;
	pf=add(pb,pf,i);
	if(pb==NULL)pb=pf;
	for(j=1;j<a[0][0].poz;j++)
	{
		if(a[i][j].poz==1)
		{
			if(repetare(j,pb)==1)
			{
				free(pf);
				pf=temp;
				pf->link=NULL;
				return 1;
			}
			else if(ciclu(a,j,pf)==1)
			{
				free(pf);
				pf=temp;
				pf->link=NULL;
				return 1;
			}
			
		}
	}
    printf("%d",temp);
   	free(pf);
	pf=temp; 	
	pf->link=NULL; 
	return 0;
}

void matr_c(matr_ad a[N][N], int prm, matr_ad c[N][N])
{
	int i,j;
	for(i=1; i<a[0][0].poz; i++)
		for(j=1; j<a[0][0].poz; j++)
		{
			if(i==j)
			{
				c[i][j].poz=0;
				continue;
			}
			if(a[i][j].poz==1)
				c[i][j].poz=a[i][j].pond;
			else
			{
				switch(prm)
				{
					case 1: c[i][j].poz=-10000; break;
					case 2: c[i][j].poz= 10000; break;
				}            
			}
		}
}

void drum_b(matr_ad mc[N][N], int m[N], int i, NOD *pu)
{
	int j;
	NOD *temp;
	pu=add(pb,pu,i);
	if(pb==NULL) pb=pu;
	for(j=1;j<mc[0][0].poz;j++)
	{
		if((mc[i][j].poz==0)&&(j!=mc[0][0].poz)) continue;
		if((mc[i][j].poz+m[j])==m[i]) 
		{
			if(m[j]==0)
			{
				temp=pb;
				printf("\t");
				while(temp)
				{
					printf("X%d, ",temp->inf);
					temp=temp->link;
				}
				printf("X%d\n\n",j);
		    }
			else
			{
				drum_b(mc,m,j,pu);
				pu->link=NULL;
			}
		}
		    
	}
	free(pu);
	pu=NULL;
}
void drum_f(matr_ad a[N][N], matr_ad H[N], int j)
{
	int i,dif;
	NOD *temp;
    add_f(j);
	for(i=1;i<a[0][0].poz;i++)
	{
		if(a[i][j].poz==1)
		{
			dif=H[j].pond-a[i][j].pond;
			if(dif==H[i].pond)
			{
				if(dif==0)
				{
					temp=pb;
					printf("\t");
					printf("X%d, ",i);
					while(temp)
					{
						printf("X%d, ",temp->inf);
						temp=temp->link;
					} 
					printf("\n\n");
				}
				else 
				{
					drum_f(a,H,i);
				}
			}
		}
	}
	temp=pb->link;
	free(pb);
	pb=temp;
}
void Bellman_Kalaba(matr_ad a[N][N], int prm)
{
	matr_ad mc[N][N];
	int v,i, m[N],y[N],cont=0,suma,j,egal;
	NOD *pu=NULL;
	pb=NULL;
	system("cls");
	matr_c(a,prm,mc);
	mc[0][0].poz=a[0][0].poz;
	afisare_matr_c(mc,a[0][0].poz);
	puts(" Fixati virful la care doriti sa ajungeti!!");
	et1: printf(" >>");
	scanf("%d",&v);
	if(v<=0 || v>=a[0][0].poz)
	{
		printf("\n Eroare"); 
		goto et1;
	}
	for(i=1;i<a[0][0].poz;i++)
	{
		m[i]=mc[i][v].poz;
	}
	cont++;
	system("cls");
	afisare_matr_c(mc,a[0][0].poz);
    afis_m(m,a[0][0].poz,cont);
    do
    {
	    for(i=1;i<a[0][0].poz;i++)
	    {
	    if(prm==1) y[i]=-10000;
	    else y[i]=10000;
	    for(j=1;j<a[0][0].poz;j++)
	    {
	    		suma=m[j]+mc[i][j].poz;
	    		if(prm==1)
	    		{
	    			if(suma>y[i]) y[i]=suma;
	    		} 
	    		else
	    		{
	    			if(suma<y[i]) y[i]=suma;
	    		}

	    }
    }
	    cont++;
        afis_m(y,a[0][0].poz,cont);
        egal=1;
        for(i=1;i<a[0][0].poz;i++)
        {
         	if(m[i]!=y[i]) egal=0;
            m[i]=y[i];
        }
    }while(egal==0);
    //afisarea drumurilor
    printf("\n Drumurile de valoare ");
    if(prm==1) puts("maxime:");
    else puts("minime:");
    printf("\n\n");
    for(i=1;i<mc[0][0].poz;i++)
    	{
        	if(i==v) continue;
        	printf("\n Drumurile de valoare ");
            if(prm==1) puts("maxima ");
            else puts("minima ");
            printf("din virful X%d spre varful X%d sunt: \n\n",i,v);
    		drum_b(mc,m,i,pu);
    		pb=NULL;
       	}
	getch();
}
void afis_H(matr_ad H[N])
{
	int i;
	printf("\n");
	printf(" X[i]: ");
	for(i=1;i<H[0].poz;i++)
		printf("  X%d",i); 
	printf("\n");
	printf(" H[i]: ");
	for(i=1;i<H[0].poz;i++)
	{
		if(H[i].pond<-10) {printf("  -~"); continue;}
		if(H[i].pond>2000)  {printf("   ~"); continue;}
		printf("%4d",H[i].pond);
    }
	printf("\n");
}
void Ford(matr_ad a[N][N], int prm)
{
	NOD *pu;
	int v,i,dif,j,egal;
	matr_ad H[N],Haux[N];
	pb=NULL;
	H[0].poz=a[0][0].poz;
	puts(" Fixati virful de la care doriti sa porniti!!");
	et1:printf(" >>");
	scanf("%d",&v);
	system("cls");
	if(v<=0 || v>=a[0][0].poz)
	{
		printf("\n Eroare"); 
		goto et1;
	}
	for(i=1;i<a[0][0].poz;i++)
	{
		if(i==v) H[i].pond=0;
		else
		{
			if(prm==1) H[i].pond=-10000;
			else H[i].pond=10000;
		}
		Haux[i].pond=H[i].pond;
	}
	afis_H(H);
	printf("\n");
	do
	{
		for(i=1;i<a[0][0].poz;i++)
		{
			for(j=1;j<a[0][0].poz;j++)
			{
				if(a[i][j].poz==1)
				{ 
					dif=H[j].pond-H[i].pond;			
					if(prm==1) 
						{
							if(dif<a[i][j].pond)
							{ 
								H[j].pond=H[i].pond+a[i][j].pond;
								H[j].poz=i;
							}
						}
					else
						{
							if(dif>a[i][j].pond)
							{ 
								H[j].pond=H[i].pond+a[i][j].pond; 
								H[j].poz=i;
							}
						}
			    }
			}
		}
		   egal=1;
	    for(i=1;i<a[0][0].poz;i++)
	    {
	        if(H[i].pond!=Haux[i].pond)egal=0;
	        Haux[i].pond=H[i].pond;
	    }
	afis_H(H); 
	printf("\n");
	}while(egal==0);
	printf("\n Drumurile de valoare ");
    if(prm==1) puts("maxime:");
    else puts("minime:");
    printf("\n\n");
    for(i=1;i<a[0][0].poz;i++)
    	{
        	if(i==v) continue;
        	printf("\n Drumurile de valoare ");
            if(prm==1) puts("maxima ");
            else puts("minima ");
            printf("din virful X%d spre varful X%d sunt: \n\n",v,i);
    		drum_f(a,H,i);
    		pb=NULL;
       	}
	getch();

}
int main()
{
	int q,k,i;
	NOD *pf;
	matr_ad m[N][N];
	pf=(NOD*)malloc(sizeof(NOD));
	printf("\n\n\n\n\n\n\n\n\t\t\t\t\t\t\t^^^^^^^^^\n");
	printf("\t\t\t\t\t\t\t^^SALUT^^\n\t\t\t\t\t\t\t^^^^^^^^^\n\t\t\t\t\t  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\t\t\t\t\t  ^^Tastati un buton pentru a continua^^\n");
	printf("\t\t\t\t\t  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
	system("pause");
	et9:
	meniu(m);
	pb=NULL;
	for(i=1;i<m[0][0].poz;i++)
		if(ciclu(m,i,pf)==1)
		{
			printf(" Eroare! Ati introdus un graf ce contine un ciclu");
			system("pause");
			goto et9;

		}
	do
	{
		system("cls");
		printf("\n\n\t\t\t\t\tCe fel de drum doriti sa determinati? \n");
		printf(" 1. Drum de valoare maxima\n");
		printf(" 2. Drum de valoare minima\n");
		printf(" 3. Iesire\n");
		printf(" >>");
		scanf("%4d",&q);
		switch(q)
		{
			case 1:
			{
				do
				{
					system("cls");
					printf("\n\n\t\t\t\t\tAlegeti algoritmul pe care doriti sa-l utilizati\n");
				    printf(" 1. Algoritmul Bellman-Kalaba\n");
		            printf(" 2. Algoritmul Ford\n");
		       	    printf(" >>");
		            scanf("%d",&k);
		            switch(k)
		            {
		            	case 1:
		        	    {
		        	    	 Bellman_Kalaba(m,1); goto afara1;
		        	    }
		        	    case 2:
		        	    {
		        	    	 Ford(m,1); goto afara1;
		        	    }
		            } 
		        }while(1);
			}
			case 2: 
			{
				do
				{
					system("cls");
					printf("\n\n\t\t\t\t\tAlegeti algoritmul pe care doriti sa-l utilizati\n");
				    printf(" 1. Algoritmul Bellman-Kalaba\n");
		            printf(" 2. Algoritmul Ford\n");
		       	    printf(" >>");
		            scanf("%d",&k);
		            switch(k)
		            {
		            	case 1:
		        	    {
		        	    	 Bellman_Kalaba(m,2); goto afara1;
		        	    }
		        	    case 2:
		        	    {
		        	    	 Ford(m,2); goto afara1;
		        	    }
		            } 
		        }while(1);
			}
			case 3: return 0;
		}
		afara1:;
    }while(1);
    free(pf);
}
